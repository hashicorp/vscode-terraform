{"builtInFunctions":[{"name":"abs(float)","description":"- Returns the absolute value of a given float.\nExample: abs(1) returns 1, and abs(-1) would also return 1,\nwhereas abs(-3.14) would return 3.14. See also the signum function.","args":[]},{"name":"basename(path)","description":"- Returns the last element of a path.","args":[]},{"name":"base64decode(string)","description":"- Given a base64-encoded string, decodes it and\nreturns the original string.","args":[]},{"name":"base64encode(string)","description":"- Returns a base64-encoded representation of the\ngiven string.","args":[]},{"name":"base64gzip(string)","description":"- Compresses the given string with gzip and then\nencodes the result to base64. This can be used with certain resource\narguments that allow binary data to be passed with base64 encoding, since\nTerraform strings are required to be valid UTF-8.","args":[]},{"name":"base64sha256(string)","description":"- Returns a base64-encoded representation of raw\nSHA-256 sum of the given string.\nThis is not equivalent of base64encode(sha256(string))\nsince sha256() returns hexadecimal representation.","args":[]},{"name":"base64sha512(string)","description":"- Returns a base64-encoded representation of raw\nSHA-512 sum of the given string.\nThis is not equivalent of base64encode(sha512(string))\nsince sha512() returns hexadecimal representation.","args":[]},{"name":"bcrypt(password, cost)","description":"- Returns the Blowfish encrypted hash of the string \nat the given cost. A default cost of 10 will be used if not provided.","args":[]},{"name":"ceil(float)","description":"- Returns the least integer value greater than or equal\n  to the argument.","args":[]},{"name":"chomp(string)","description":"- Removes trailing newlines from the given string.","args":[]},{"name":"chunklist(list, size)","description":"- Returns the list items chunked by size.\nExamples:\n\n\nchunklist(aws_subnet.foo.*.id, 1): will outputs [[\"id1\"], [\"id2\"], [\"id3\"]]\n\nchunklist(var.list_of_strings, 2): will outputs [[\"id1\", \"id2\"], [\"id3\", \"id4\"], [\"id5\"]]","args":[]},{"name":"cidrhost(iprange, hostnum)","description":"- Takes an IP address range in CIDR notation\nand creates an IP address with the given host number. If given host\nnumber is negative, the count starts from the end of the range.\nFor example, cidrhost(\"10.0.0.0/8\", 2) returns 10.0.0.2 and\ncidrhost(\"10.0.0.0/8\", -2) returns 10.255.255.254.","args":[]},{"name":"cidrnetmask(iprange)","description":"- Takes an IP address range in CIDR notation\nand returns the address-formatted subnet mask format that some\nsystems expect for IPv4 interfaces. For example,\ncidrnetmask(\"10.0.0.0/8\") returns 255.0.0.0. Not applicable\nto IPv6 networks since CIDR notation is the only valid notation for\nIPv6.","args":[]},{"name":"cidrsubnet(iprange, newbits, netnum)","description":"- Takes an IP address range in\nCIDR notation (like 10.0.0.0/8) and extends its prefix to include an\nadditional subnet number. For example,\ncidrsubnet(\"10.0.0.0/8\", 8, 2) returns 10.2.0.0/16;\ncidrsubnet(\"2607:f298:6051:516c::/64\", 8, 2) returns\n2607:f298:6051:516c:200::/72.","args":[]},{"name":"coalesce(string1, string2, ...)","description":"- Returns the first non-empty value from\nthe given arguments. At least two arguments must be provided.","args":[]},{"name":"coalescelist(list1, list2, ...)","description":"- Returns the first non-empty list from\nthe given arguments. At least two arguments must be provided.","args":[]},{"name":"compact(list)","description":"- Removes empty string elements from a list. This can be\n useful in some cases, for example when passing joined lists as module\n variables or when parsing module outputs.\n Example: compact(module.my_asg.load_balancer_names)","args":[]},{"name":"concat(list1, list2, ...)","description":"- Combines two or more lists into a single list.\n Example: concat(aws_instance.db.*.tags.Name, aws_instance.web.*.tags.Name)","args":[]},{"name":"contains(list, element)","description":"- Returns true if a list contains the given element\n and returns false otherwise. Examples: contains(var.list_of_strings, \"an_element\")","args":[]},{"name":"dirname(path)","description":"- Returns all but the last element of path, typically the path's directory.","args":[]},{"name":"distinct(list)","description":"- Removes duplicate items from a list. Keeps the first\n occurrence of each element, and removes subsequent occurrences. This\n function is only valid for flat lists. Example: distinct(var.usernames)","args":[]},{"name":"element(list, index)","description":"- Returns a single element from a list\n  at the given index. If the index is greater than the number of\n  elements, this function will wrap using a standard mod algorithm.\n  This function only works on flat lists. Examples:\n\n\nelement(aws_subnet.foo.*.id, count.index)\n\nelement(var.list_of_strings, 2)","args":[]},{"name":"file(path)","description":"- Reads the contents of a file into the string. Variables\n  in this file are not interpolated. The contents of the file are\n  read as-is. The path is interpreted relative to the working directory.\n  Path variables can be used to reference paths relative\n  to other base locations. For example, when using file() from inside a\n  module, you generally want to make the path relative to the module base,\n  like this: file(\"${path.module}/file\").","args":[]},{"name":"floor(float)","description":"- Returns the greatest integer value less than or equal to\n  the argument.","args":[]},{"name":"flatten(list of lists)","description":"- Flattens lists of lists down to a flat list of\n   primitive values, eliminating any nested lists recursively. Examples:\n\n\nflatten(data.github_user.user.*.gpg_keys)","args":[]},{"name":"format(format, args, ...)","description":"- Formats a string according to the given\n  format. The syntax for the format is standard sprintf syntax.\n  Good documentation for the syntax can be found here.\n  Example to zero-prefix a count, used commonly for naming servers:\n  format(\"web-%03d\", count.index + 1).","args":[]},{"name":"formatlist(format, args, ...)","description":"- Formats each element of a list\n  according to the given format, similarly to format, and returns a list.\n  Non-list arguments are repeated for each list element.\n  For example, to convert a list of DNS addresses to a list of URLs, you might use:\n  formatlist(\"https://%s:%s/\", aws_instance.foo.*.public_dns, var.port).\n  If multiple args are lists, and they have the same number of elements, then the formatting is applied to the elements of the lists in parallel.\n  Example:\n  formatlist(\"instance %v has private ip %v\", aws_instance.foo.*.id, aws_instance.foo.*.private_ip).\n  Passing lists with different lengths to formatlist results in an error.","args":[]},{"name":"indent(numspaces, string)","description":"- Prepends the specified number of spaces to all but the first\n  line of the given multi-line string. May be useful when inserting a multi-line string\n  into an already-indented context. The first line is not indented, to allow for the\n  indented string to be placed after some sort of already-indented preamble.\n  Example: \"    \\\"items\\\": ${ indent(4, \"[\\n    \\\"item1\\\"\\n]\") },\"","args":[]},{"name":"index(list, elem)","description":"- Finds the index of a given element in a list.\n  This function only works on flat lists.\n  Example: index(aws_instance.foo.*.tags.Name, \"foo-test\")","args":[]},{"name":"join(delim, list)","description":"- Joins the list with the delimiter for a resultant string.\n  This function works only on flat lists.\n  Examples:\n\n\njoin(\",\", aws_instance.foo.*.id)\n\njoin(\",\", var.ami_list)","args":[]},{"name":"jsonencode(value)","description":"- Returns a JSON-encoded representation of the given\n  value, which can contain arbitrarily-nested lists and maps. Note that if\n  the value is a string then its value will be placed in quotes.","args":[]},{"name":"keys(map)","description":"- Returns a lexically sorted list of the map keys.","args":[]},{"name":"length(list)","description":"- Returns the number of members in a given list or map, or the number of characters in a given string.\n\n\n${length(split(\",\", \"a,b,c\"))} = 3\n\n${length(\"a,b,c\")} = 5\n\n${length(map(\"key\", \"val\"))} = 1","args":[]},{"name":"list(items, ...)","description":"- Returns a list consisting of the arguments to the function.\n  This function provides a way of representing list literals in interpolation.\n\n\n${list(\"a\", \"b\", \"c\")} returns a list of \"a\", \"b\", \"c\".\n\n${list()} returns an empty list.","args":[]},{"name":"log(x, base)","description":"- Returns the logarithm of x.","args":[]},{"name":"lookup(map, key, [default])","description":"- Performs a dynamic lookup into a map\n  variable. The map parameter should be another variable, such\n  as var.amis. If key does not exist in map, the interpolation will\n  fail unless you specify a third argument, default, which should be a\n  string value to return if no key is found in map. This function\n  only works on flat maps and will return an error for maps that\n  include nested lists or maps.","args":[]},{"name":"lower(string)","description":"- Returns a copy of the string with all Unicode letters mapped to their lower case.","args":[]},{"name":"map(key, value, ...)","description":"- Returns a map consisting of the key/value pairs\nspecified as arguments. Every odd argument must be a string key, and every\neven argument must have the same type as the other values specified.\nDuplicate keys are not allowed. Examples:\n\n\nmap(\"hello\", \"world\")\n\nmap(\"us-east\", list(\"a\", \"b\", \"c\"), \"us-west\", list(\"b\", \"c\", \"d\"))","args":[]},{"name":"matchkeys(values, keys, searchset)","description":"- For two lists values and keys of\n  equal length, returns all elements from values where the corresponding\n  element from keys exists in the searchset list.  E.g.\n  matchkeys(aws_instance.example.*.id,\n  aws_instance.example.*.availability_zone, list(\"us-west-2a\")) will return a\n  list of the instance IDs of the aws_instance.example instances in\n  \"us-west-2a\". No match will result in empty list. Items of keys are\n  processed sequentially, so the order of returned values is preserved.","args":[]},{"name":"max(float1, float2, ...)","description":"- Returns the largest of the floats.","args":[]},{"name":"merge(map1, map2, ...)","description":"- Returns the union of 2 or more maps. The maps\nare consumed in the order provided, and duplicate keys overwrite previous\nentries.\n\n\n${merge(map(\"a\", \"b\"), map(\"c\", \"d\"))} returns {\"a\": \"b\", \"c\": \"d\"}","args":[]},{"name":"min(float1, float2, ...)","description":"- Returns the smallest of the floats.","args":[]},{"name":"md5(string)","description":"- Returns a (conventional) hexadecimal representation of the\nMD5 hash of the given string.","args":[]},{"name":"pathexpand(string)","description":"- Returns a filepath string with ~ expanded to the home directory. Note:\nThis will create a plan diff between two different hosts, unless the filepaths are the same.","args":[]},{"name":"pow(x, y)","description":"- Returns the base x of exponential y as a float.\nExample:\n\n\n${pow(3,2)} = 9\n\n${pow(4,0)} = 1","args":[]},{"name":"replace(string, search, replace)","description":"- Does a search and replace on the\n  given string. All instances of search are replaced with the value\n  of replace. If search is wrapped in forward slashes, it is treated\n  as a regular expression. If using a regular expression, replace\n  can reference subcaptures in the regular expression by using $n where\n  n is the index or name of the subcapture. If using a regular expression,\n  the syntax conforms to the re2 regular expression syntax.","args":[]},{"name":"rsadecrypt(string, key)","description":"- Decrypts string using RSA. The padding scheme\nPKCS #1 v1.5 is used. The string must be base64-encoded. key must be an\nRSA private key in PEM format. You may use file() to load it from a file.","args":[]},{"name":"sha1(string)","description":"- Returns a (conventional) hexadecimal representation of the\nSHA-1 hash of the given string.\nExample: \"${sha1(\"${aws_vpc.default.tags.customer}-s3-bucket\")}\"","args":[]},{"name":"sha256(string)","description":"- Returns a (conventional) hexadecimal representation of the\nSHA-256 hash of the given string.\nExample: \"${sha256(\"${aws_vpc.default.tags.customer}-s3-bucket\")}\"","args":[]},{"name":"sha512(string)","description":"- Returns a (conventional) hexadecimal representation of the\nSHA-512 hash of the given string.\nExample: \"${sha512(\"${aws_vpc.default.tags.customer}-s3-bucket\")}\"","args":[]},{"name":"signum(integer)","description":"- Returns -1 for negative numbers, 0 for 0 and 1 for positive numbers.\n  This function is useful when you need to set a value for the first resource and\n  a different value for the rest of the resources.\n  Example: element(split(\",\", var.r53_failover_policy), signum(count.index))\n  where the 0th index points to PRIMARY and 1st to FAILOVER","args":[]},{"name":"slice(list, from, to)","description":"- Returns the portion of list between from (inclusive) and to (exclusive).\n  Example: slice(var.list_of_strings, 0, length(var.list_of_strings) - 1)","args":[]},{"name":"sort(list)","description":"- Returns a lexographically sorted list of the strings contained in\n  the list passed as an argument. Sort may only be used with lists which contain only\n  strings.\n  Examples: sort(aws_instance.foo.*.id), sort(var.list_of_strings)","args":[]},{"name":"split(delim, string)","description":"- Splits the string previously created by join\n  back into a list. This is useful for pushing lists through module\n  outputs since they currently only support string values. Depending on the\n  use, the string this is being performed within may need to be wrapped\n  in brackets to indicate that the output is actually a list, e.g.\n  a_resource_param = [\"${split(\",\", var.CSV_STRING)}\"].\n  Example: split(\",\", module.amod.server_ids)","args":[]},{"name":"substr(string, offset, length)","description":"- Extracts a substring from the input string. A negative offset is interpreted as being equivalent to a positive offset measured backwards from the end of the string. A length of -1 is interpreted as meaning \"until the end of the string\".","args":[]},{"name":"timestamp()","description":"- Returns a UTC timestamp string in RFC 3339 format. This string will change with every\ninvocation of the function, so in order to prevent diffs on every plan & apply, it must be used with the\nignore_changes lifecycle attribute.","args":[]},{"name":"timeadd(time, duration)","description":"- Returns a UTC timestamp string corresponding to adding a given duration to time in RFC 3339 format.\nFor example, timeadd(\"2017-11-22T00:00:00Z\", \"10m\") produces a value \"2017-11-22T00:10:00Z\".","args":[]},{"name":"title(string)","description":"- Returns a copy of the string with the first characters of all the words capitalized.","args":[]},{"name":"transpose(map)","description":"- Swaps the keys and list values in a map of lists of strings. For example, transpose(map(\"a\", list(\"1\", \"2\"), \"b\", list(\"2\", \"3\")) produces a value equivalent to map(\"1\", list(\"a\"), \"2\", list(\"a\", \"b\"), \"3\", list(\"b\")).","args":[]},{"name":"trimspace(string)","description":"- Returns a copy of the string with all leading and trailing white spaces removed.","args":[]},{"name":"upper(string)","description":"- Returns a copy of the string with all Unicode letters mapped to their upper case.","args":[]},{"name":"urlencode(string)","description":"- Returns an URL-safe copy of the string.","args":[]},{"name":"uuid()","description":"- Returns a UUID string in RFC 4122 v4 format. This string will change with every invocation of the function, so in order to prevent diffs on every plan & apply, it must be used with the ignore_changes lifecycle attribute.","args":[]},{"name":"values(map)","description":"- Returns a list of the map values, in the order of the keys\nreturned by the keys function. This function only works on flat maps and\nwill return an error for maps that include nested lists or maps.","args":[]},{"name":"zipmap(list, list)","description":"- Creates a map from a list of keys and a list of\n  values. The keys must all be of type string, and the length of the lists\n  must be the same.\n  For example, to output a mapping of AWS IAM user names to the fingerprint\n  of the key used to encrypt their initial password, you might use:\n  zipmap(aws_iam_user.users.*.name, aws_iam_user_login_profile.users.*.key_fingerprint).","args":[]}],"resource":[{"name":"count","description":"(int) - The number of identical resources to create. This doesn't\napply to all resources. For details on using variables in conjunction with\ncount, see Using Variables with count below.\n\nModules don't currently support the count parameter.","args":[]},{"name":"depends_on","description":"(list of strings) - Explicit dependencies that this resource has.\nThese dependencies will be created before this resource. For syntax and other\ndetails, see the section below on explicit\ndependencies.","args":[]},{"name":"provider","description":"(string) - The name of a specific provider to use for this\nresource. The name is in the format of TYPE.ALIAS, for example, aws.west.\nWhere west is set using the alias attribute in a provider. See multiple\nprovider instances.","args":[]},{"name":"lifecycle","description":"(configuration block) - Customizes the lifecycle behavior of the\nresource. The specific options are documented below.\nThe lifecycle block allows the following keys to be set:\n\n\ncreate_before_destroy (bool) - This flag is used to ensure the replacement\nof a resource is created before the original instance is destroyed. As an\nexample, this can be used to create an new DNS record before removing an old\nrecord.\n\nResources that utilize the create_before_destroy key can only\ndepend on other resources that also include create_before_destroy.\nReferencing a resource that does not include create_before_destroy\nwill result in a dependency graph cycle.\n\n\nprevent_destroy (bool) - This flag provides extra protection against the\ndestruction of a given resource. When this is set to true, any plan that\nincludes a destroy of this resource will return an error message.\n\nignore_changes (list of strings) - Customizes how diffs are evaluated for\nresources, allowing individual attributes to be ignored through changes. As\nan example, this can be used to ignore dynamic changes to the resource from\nexternal resources. Other meta-parameters cannot be ignored.\n\nIgnored attribute names can be matched by their name, not state ID.\nFor example, if an aws_route_table has two routes defined and the\nignore_changes list contains \"route\", both routes will be ignored.\nAdditionally you can also use a single entry with a wildcard (e.g. \"*\")\nwhich will match all attribute names. Using a partial string together\nwith a wildcard (e.g. \"rout*\") is not supported.","args":[{"name":"create_before_destroy","description":"(bool)  This flag is used to ensure the replacement\nof a resource is created before the original instance is destroyed. As an\nexample, this can be used to create an new DNS record before removing an old\nrecord.\n\nResources that utilize the create_before_destroy key can only\ndepend on other resources that also include create_before_destroy.\nReferencing a resource that does not include create_before_destroy\nwill result in a dependency graph cycle.","args":[]},{"name":"prevent_destroy","description":"(bool)  This flag provides extra protection against the\ndestruction of a given resource. When this is set to true, any plan that\nincludes a destroy of this resource will return an error message.","args":[]},{"name":"ignore_changes","description":"(list of strings)  Customizes how diffs are evaluated for\nresources, allowing individual attributes to be ignored through changes. As\nan example, this can be used to ignore dynamic changes to the resource from\nexternal resources. Other meta-parameters cannot be ignored.\n\nIgnored attribute names can be matched by their name, not state ID.\nFor example, if an aws_route_table has two routes defined and the\nignore_changes list contains \"route\", both routes will be ignored.\nAdditionally you can also use a single entry with a wildcard (e.g. \"*\")\nwhich will match all attribute names. Using a partial string together\nwith a wildcard (e.g. \"rout*\") is not supported.","args":[]}]}],"variable":[{"name":"type","description":"(Optional) - If set this defines the type of the variable. Valid values\nare string, list, and map. If this field is omitted, the variable type\nwill be inferred based on default. If no default is provided, the type\nis assumed to be string.","args":[]},{"name":"default","description":"(Optional) - This sets a default value for the variable. If no\ndefault is provided, Terraform will raise an error if a value is not provided\nby the caller. The default value can be of any of the supported data types,\nas described below. If type is also set, the given value must be\nof the specified type.","args":[]},{"name":"description","description":"(Optional) - A human-friendly description for the variable. This\nis primarily for documentation for users using your Terraform configuration.\nWhen a module is published in Terraform Registry,\nthe given description is shown as part of the documentation.","args":[]}],"output":[{"name":"value","description":"(required) - The value of the output. This can be a string, list, or\nmap. This usually includes an interpolation since outputs that are static\naren't usually useful.","args":[]},{"name":"description","description":"(optional) - A human-friendly description for the output. This\nis primarily for documentation for users using your Terraform configuration. A\nfuture version of Terraform will expose these descriptions as part of some\nTerraform CLI command.","args":[]},{"name":"depends_on","description":"(list of strings) - Explicit dependencies that this output has.\nThese dependencies will be created before this output value is processed. The\ndependencies are in the format of TYPE.NAME, for example aws_instance.web.","args":[]},{"name":"sensitive","description":"(optional, boolean) - See below.","args":[]}],"module":[{"name":"source","description":"- (Required) A module source string\nspecifying the location of the child module source code.","args":[]},{"name":"version","description":"- (Optional) A version constraint\nstring that specifies which versions of the referenced module are acceptable.\nThe newest version matching the constraint will be used. version is supported\nonly for modules retrieved from module registries.","args":[]},{"name":"providers","description":"- (Optional) A map whose keys are provider configuration names\nthat are expected by child module and whose values are corresponding\nprovider names in the calling module. This allows\nprovider configurations to be passed explicitly to child modules.\nIf not specified, the child module inherits all of the default (un-aliased)\nprovider configurations from the calling module.","args":[]}]}