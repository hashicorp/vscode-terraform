{
  "icon": "assets/icons/terraform_logo_mark_light_universal.png",
  "name": "terraform",
  "displayName": "HashiCorp Terraform",
  "description": "Syntax highlighting and autocompletion for Terraform",
  "version": "2.23.0",
  "publisher": "hashicorp",
  "appInsightsKey": "885372d2-6f3c-499f-9d25-b8b219983a52",
  "license": "MPL-2.0",
  "preview": false,
  "private": true,
  "extensionKind": [
    "workspace"
  ],
  "engines": {
    "npm": "~8.X",
    "node": "~16.X",
    "vscode": "^1.61.0"
  },
  "langServer": {
    "version": "0.28.1"
  },
  "syntax": {
    "version": "0.4.0"
  },
  "qna": "https://discuss.hashicorp.com/c/terraform-core/terraform-editor-integrations/46",
  "bugs": {
    "url": "https://github.com/hashicorp/vscode-terraform/issues",
    "email": "terraform-vscode@hashicorp.com"
  },
  "categories": [
    "Programming Languages",
    "Other",
    "Formatters",
    "Linters"
  ],
  "keywords": [
    "devops",
    "terraform",
    "hcl"
  ],
  "galleryBanner": {
    "color": "#FFF",
    "theme": "light"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/hashicorp/vscode-terraform.git"
  },
  "activationEvents": [
    "onLanguage:terraform",
    "onLanguage:terraform-vars",
    "onView:terraform-modules",
    "workspaceContains:**/*.tf",
    "workspaceContains:**/*.tfvars",
    "onCommand:terraform.enableLanguageServer"
  ],
  "main": "./out/extension",
  "contributes": {
    "languages": [
      {
        "id": "terraform",
        "aliases": [
          "Terraform",
          "terraform"
        ],
        "extensions": [
          ".tf"
        ],
        "configuration": "./language-configuration.json"
      },
      {
        "id": "terraform-vars",
        "extensions": [
          ".tfvars"
        ],
        "configuration": "./language-configuration.json"
      },
      {
        "id": "json",
        "extensions": [
          ".tfstate"
        ]
      }
    ],
    "grammars": [
      {
        "language": "terraform",
        "scopeName": "source.hcl.terraform",
        "path": "./syntaxes/terraform.tmGrammar.json"
      },
      {
        "language": "terraform-vars",
        "scopeName": "source.hcl.terraform",
        "path": "./syntaxes/terraform.tmGrammar.json"
      }
    ],
    "semanticTokenTypes": [
      {
        "id": "hcl-attrName",
        "superType": "property",
        "description": "Attribute name"
      },
      {
        "id": "hcl-blockType",
        "superType": "type",
        "description": "Block type"
      },
      {
        "id": "hcl-blockLabel",
        "superType": "enumMember",
        "description": "Block label"
      },
      {
        "id": "hcl-bool",
        "superType": "keyword",
        "description": "Boolean"
      },
      {
        "id": "hcl-string",
        "superType": "string",
        "description": "String"
      },
      {
        "id": "hcl-number",
        "superType": "number",
        "description": "Number"
      },
      {
        "id": "hcl-objectKey",
        "superType": "parameter",
        "description": "Object key"
      },
      {
        "id": "hcl-mapKey",
        "superType": "parameter",
        "description": "Map key"
      },
      {
        "id": "hcl-keyword",
        "superType": "variable",
        "description": "Keyword"
      },
      {
        "id": "hcl-traversalStep",
        "superType": "variable",
        "description": "Traversal step"
      },
      {
        "id": "hcl-typeCapsule",
        "superType": "keyword",
        "description": "Type (complex)"
      },
      {
        "id": "hcl-typePrimitive",
        "superType": "keyword",
        "description": "Type (primitive)"
      }
    ],
    "semanticTokenScopes": [
      {
        "scopes": {
          "hcl-attrName": [
            "variable.other.property"
          ],
          "hcl-blockType": [
            "entity.name.type"
          ],
          "hcl-blockLabel": [
            "variable.other.enummember"
          ],
          "hcl-bool": [
            "keyword.control"
          ],
          "hcl-string": [
            "string"
          ],
          "hcl-number": [
            "constant.numeric"
          ],
          "hcl-objectKey": [
            "variable.parameter"
          ],
          "hcl-mapKey": [
            "variable.parameter"
          ],
          "hcl-keyword": [
            "keyword.control"
          ],
          "hcl-traversalStep": [
            "variable.other.readwrite"
          ],
          "hcl-typeCapsule": [
            "keyword.control"
          ],
          "hcl-typePrimitive": [
            "keyword.control"
          ]
        }
      }
    ],
    "semanticTokenModifiers": [
      {
        "id": "hcl-dependent",
        "description": "Dependent"
      },
      {
        "id": "terraform-data",
        "description": "Data source"
      },
      {
        "id": "terraform-locals",
        "description": "Locals"
      },
      {
        "id": "terraform-module",
        "description": "Module"
      },
      {
        "id": "terraform-output",
        "description": "Output"
      },
      {
        "id": "terraform-provider",
        "description": "Provider"
      },
      {
        "id": "terraform-resource",
        "description": "Resource"
      },
      {
        "id": "terraform-provisioner",
        "description": "Provisioner"
      },
      {
        "id": "terraform-connection",
        "description": "Connection"
      },
      {
        "id": "terraform-variable",
        "description": "Variable"
      },
      {
        "id": "terraform-terraform",
        "description": "Terraform"
      },
      {
        "id": "terraform-backend",
        "description": "Backend"
      },
      {
        "id": "terraform-name",
        "description": "Name"
      },
      {
        "id": "terraform-type",
        "description": "Type"
      },
      {
        "id": "terraform-requiredProviders",
        "description": "Required providers"
      }
    ],
    "snippets": [
      {
        "language": "terraform",
        "path": "./snippets/terraform.json"
      }
    ],
    "configuration": [
      {
        "title": "General",
        "order": 0,
        "properties": {
          "terraform.codelens.referenceCount": {
            "scope": "resource",
            "type": "boolean",
            "default": false,
            "description": "Display reference counts above top level blocks and attributes."
          }
        }
      },
      {
        "title": "Language Server",
        "order": 1,
        "properties": {
          "terraform.languageServer.enable": {
            "scope": "resource",
            "order": "0",
            "type": "boolean",
            "default": true,
            "description": "Enable Terraform Language Server"
          },
          "terraform.languageServer.path": {
            "order": "1",
            "scope": "resource",
            "type": "string",
            "default": "",
            "description": "Path to the Terraform Language Server binary (optional)"
          },
          "terraform.languageServer.args": {
            "order": "2",
            "scope": "resource",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [
              "serve"
            ],
            "description": "Arguments to pass to language server binary"
          },
          "terraform.languageServer.ignoreSingleFileWarning": {
            "order": "3",
            "scope": "resource",
            "type": "boolean",
            "default": false,
            "description": "Enable warning when opening a single Terraform file instead of a Terraform folder. Enabling this will prevent the message being sent"
          },
          "terraform.languageServer.rootModules": {
            "scope": "resource",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Per-workspace list of module directories for the language server to read",
            "deprecationMessage": "Deprecated: This setting is not used by the extension and will be removed in a future release"
          },
          "terraform.languageServer.excludeRootModules": {
            "scope": "resource",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Per-workspace list of module directories for the language server to exclude",
            "deprecationMessage": "Deprecated: This setting is not used by the extension and will be removed in a future release"
          },
          "terraform.languageServer.ignoreDirectoryNames": {
            "scope": "resource",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Per-workspace list of directory names for the language server to ignore when indexing files"
          },
          "terraform-ls.rootModules": {
            "scope": "resource",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Per-workspace list of module directories for the language server to read",
            "markdownDeprecationMessage": "Moved: Use `#terraform.languageServer.rootModules#` instead"
          },
          "terraform-ls.terraformExecPath": {
            "scope": "resource",
            "type": "string",
            "description": "Path to the Terraform binary",
            "markdownDeprecationMessage": "Moved: Use `#terraform.languageServer.terraform.path#` instead"
          },
          "terraform-ls.terraformExecTimeout": {
            "scope": "resource",
            "type": "string",
            "description": "Overrides Terraform execution timeout (e.g. 30s)",
            "markdownDeprecationMessage": "Moved: Use `#terraform.languageServer.terraform.timeout#` instead"
          },
          "terraform-ls.terraformLogFilePath": {
            "scope": "resource",
            "type": "string",
            "description": "Path to a file for Terraform executions to be logged into (TF_LOG_PATH) with support for variables (e.g. timestamp, pid, ppid) via Go template syntax {{varName}}",
            "markdownDeprecationMessage": "Moved: Use `#terraform.languageServer.terraform.logFilePath#` instead"
          },
          "terraform-ls.excludeRootModules": {
            "scope": "resource",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Per-workspace list of module directories for the language server to exclude",
            "markdownDeprecationMessage": "Moved: Use `#terraform.languageServer.excludeRootModules#` instead"
          },
          "terraform-ls.ignoreDirectoryNames": {
            "scope": "resource",
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": [],
            "description": "Per-workspace list of directory names for the language server to ignore when indexing files",
            "markdownDeprecationMessage": "Moved: Use `#terraform.languageServer.ignoreDirectoryNames#` instead"
          }
        }
      },
      {
        "title": "Terraform Features",
        "order": 3,
        "properties": {
          "terraform.languageServer.terraform.path": {
            "order": 0,
            "scope": "resource",
            "type": "string",
            "description": "Path to the Terraform binary used by the Terraform Language Server"
          },
          "terraform.languageServer.terraform.timeout": {
            "order": 1,
            "scope": "resource",
            "type": "string",
            "description": "Overrides Terraform execution timeout (e.g. 30s) used by the Terraform Language Server"
          },
          "terraform.languageServer.terraform.logFilePath": {
            "order": 2,
            "scope": "resource",
            "type": "string",
            "markdownDescription": "Path to a file (`TF_LOG_PATH`) for Terraform executions to be logged used by the the Terraform Language Server. Support for variables (e.g. timestamp, pid, ppid) via Go template syntax `{{varName}}`"
          }
        }
      },
      {
        "title": "Experimental Features",
        "order": 4,
        "properties": {
          "terraform.experimentalFeatures.validateOnSave": {
            "description": "Enable validating the currently open file on save",
            "scope": "resource",
            "type": "boolean",
            "default": false
          },
          "terraform.experimentalFeatures.prefillRequiredFields": {
            "markdownDescription": "Enable autocompletion for required fields when completing Terraform blocks. Combine with `#editor.suggest.preview#` and the editor will provide inline snippet suggestions for blocks of code",
            "scope": "resource",
            "type": "boolean",
            "default": false
          },
          "terraform-ls.experimentalFeatures": {
            "scope": "resource",
            "type": "object",
            "description": "Experimental (opt-in) terraform-ls features",
            "deprecationMessage": "Moved: Use individual terraform.experimentalFeatures.* instead",
            "properties": {
              "validateOnSave": {
                "scope": "resource",
                "markdownDeprecationMessage": "Moved: Use `#terraform.experimentalFeatures.validateOnSave#` instead",
                "type": "boolean",
                "default": false
              },
              "prefillRequiredFields": {
                "scope": "resource",
                "markdownDeprecationMessage": "Moved: Use `#terraform.experimentalFeatures.prefillRequiredFields#` instead",
                "type": "boolean",
                "default": false
              }
            }
          }
        }
      }
    ],
    "commands": [
      {
        "command": "terraform.generateBugReport",
        "title": "Terraform: Generate Bug Report"
      },
      {
        "command": "terraform.enableLanguageServer",
        "title": "Terraform: Enable Language Server"
      },
      {
        "command": "terraform.disableLanguageServer",
        "title": "Terraform: Disable Language Server"
      },
      {
        "command": "terraform.init",
        "title": "Terraform: init"
      },
      {
        "command": "terraform.initCurrent",
        "title": "Terraform: init current folder"
      },
      {
        "command": "terraform.validate",
        "title": "Terraform: validate"
      },
      {
        "command": "terraform.plan",
        "title": "Terraform: plan"
      },
      {
        "command": "terraform.modules.refreshList",
        "title": "Refresh Module Calls",
        "icon": "$(refresh)"
      },
      {
        "command": "terraform.providers.refreshList",
        "title": "Refresh Module Providers",
        "icon": "$(refresh)"
      },
      {
        "command": "terraform.modules.openDocumentation",
        "title": "Open Documentation",
        "icon": "$(book)"
      },
      {
        "command": "terraform.providers.openDocumentation",
        "title": "Open Documentation",
        "icon": "$(book)"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "terraform.modules.refreshList",
          "when": "false"
        },
        {
          "command": "terraform.providers.refreshList",
          "when": "false"
        },
        {
          "command": "terraform.modules.openDocumentation",
          "when": "false"
        },
        {
          "command": "terraform.providers.openDocumentation",
          "when": "false"
        }
      ],
      "view/title": [
        {
          "command": "terraform.modules.refreshList",
          "when": "view == terraform.modules",
          "group": "navigation"
        },
        {
          "command": "terraform.providers.refreshList",
          "when": "view == terraform.providers",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "terraform.modules.openDocumentation",
          "when": "view == terraform.modules"
        },
        {
          "command": "terraform.providers.openDocumentation",
          "when": "view == terraform.providers && viewItem == moduleProviderHasDocs"
        }
      ]
    },
    "views": {
      "explorer": [
        {
          "id": "terraform.providers",
          "name": "Terraform Providers",
          "icon": "assets/icons/terraform.svg",
          "visibility": "collapsed",
          "when": "terraform.showTreeViews"
        },
        {
          "id": "terraform.modules",
          "name": "Terraform Module Calls",
          "icon": "assets/icons/terraform.svg",
          "visibility": "collapsed",
          "when": "terraform.showTreeViews"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "terraform.providers",
        "contents": "The active editor cannot provide information about installed providers. [Learn more about providers](https://www.terraform.io/docs/language/providers/index.html). You may need to update your language server version."
      },
      {
        "view": "terraform.modules",
        "contents": "The active editor cannot provide information about installed modules. [Learn more about modules](https://www.terraform.io/docs/language/modules/develop/index.html) You may need to run 'terraform get' or update your language server version."
      }
    ]
  },
  "scripts": {
    "esbuild-base": "esbuild ./src/extension.ts --bundle --outfile=out/extension.js --external:vscode --format=cjs --platform=node",
    "esbuild": "npm run esbuild-base -- --sourcemap",
    "esbuild-watch": "npm run esbuild-base -- --sourcemap --watch",
    "compile": "npm run esbuild",
    "watch": "npm run download:artifacts && npm run esbuild-watch",
    "download:artifacts": "ts-node ./build/downloader.ts",
    "vscode:prepublish": "npm run download:artifacts && npm run esbuild-base -- --minify",
    "package": "vsce package",
    "test-compile": "tsc -p ./",
    "pretest": "npm run download:artifacts && npm run test-compile && npm run lint",
    "test": "node ./out/test/runTest.js",
    "test:unit": "jest",
    "lint": "eslint src --ext ts",
    "prettier": "prettier \"**/*.+(js|json|ts)\"",
    "format": "npm run prettier -- --write",
    "check-format": "npm run prettier -- --check",
    "preview": "ts-node ./build/preview.ts"
  },
  "dependencies": {
    "@vscode/extension-telemetry": "^0.4.9",
    "vscode-languageclient": "^7.0.0",
    "vscode-uri": "^3.0.2",
    "which": "^2.0.2"
  },
  "devDependencies": {
    "@hashicorp/js-releases": "^1.4.0",
    "@types/chai": "^4.2.22",
    "@types/glob": "^7.1.3",
    "@types/jest": "^27.0.3",
    "@types/mocha": "^9.0.0",
    "@types/node": "^16.11.7",
    "@types/vscode": "^1.61.1",
    "@types/which": "^2.0.1",
    "@typescript-eslint/eslint-plugin": "^5.9.0",
    "@typescript-eslint/parser": "^5.9.0",
    "@vscode/test-electron": "^2.0.1",
    "chai": "^4.3.4",
    "esbuild": "^0.14.11",
    "eslint": "^8.6.0",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-prettier": "^4.0.0",
    "glob": "^7.1.6",
    "got": "^11.8.3",
    "jest": "^27.4.3",
    "mocha": "^9.1.3",
    "prettier": "^2.3.2",
    "ts-jest": "^27.1.0",
    "ts-node": "^10.7.0",
    "typescript": "^4.6.2",
    "vsce": "^2.6.6"
  }
}
