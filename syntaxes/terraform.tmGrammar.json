{
	"scopeName": "scope.terraform",
	"fileTypes": [
		"tf",
		"tfvars",
		"hcl"
	],
	"name": "Terraform",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#attribute_definition"
		},
		{
			"include": "#block"
		},
		{
			"include": "#expressions"
		}
	],
	"repository": {
		"char_escapes": {
			"match": "\\\\[nrt\"\\\\]|\\\\u(\\h{8}|\\h{4})",
			"comment": "Character Escapes",
			"name": "constant.character.escape.terraform"
		},
		"comma": {
			"match": "\\,",
			"comment": "Commas - used in certain expressions",
			"name": "punctuation.separator.terraform keyword.operator"
		},
		"language_constants": {
			"match": "\\b(true|false|null)\\b",
			"comment": "Language Constants",
			"name": "constant.language.terraform"
		},
		"named_value_references": {
			"match": "\\b(var|local|module|data|path|terraform)\\b",
			"comment": "Constant values available only to Terraform.",
			"name": "variable.other.readwrite.terraform constant.language.terraform"
		},
		"local_identifiers": {
			"match": "\\b(?!null|false|true|for|in)[[:alpha:]][[:alnum:]_-]*\\b",
			"comment": "Local Identifiers",
			"name": "variable.other.readwrite.terraform constant.language.terraform"
		},
		"terraform_type_keywords": {
			"match": "\\b(any|string|number|bool)\\b",
			"comment": "Type keywords known to Terraform.",
			"name": "constant.language.terraform"
		},
		"comments": {
			"patterns": [
				{
					"include": "#inline_comments"
				},
				{
					"include": "#block_comments"
				}
			]
		},
		"inline_comments": {
			"begin": "#|//",
			"comment": "Inline Comments",
			"name": "comment.line.terraform",
			"captures": {
				"0": {
					"name": "punctuation.definition.comment.terraform"
				}
			},
			"end": "$\\n?"
		},
		"block_comments": {
			"begin": "/\\*",
			"comment": "Block comments",
			"name": "comment.block.terraform",
			"captures": {
				"0": {
					"name": "punctuation.definition.comment.terraform"
				}
			},
			"end": "\\*/"
		},
		"attribute_definition": {
			"match": "(\\()?((?!null|false|true)[[:alpha:]][[:alnum:]_-]*)(\\))?\\s*(\\=(?!\\=|\\>))\\s*",
			"comment": "Identifier \"=\" with optional parens",
			"name": "variable.declaration.terraform",
			"captures": {
				"1": {
					"name": "punctuation.section.parens.begin.terraform meta.template.expression.terraform"
				},
				"2": {
					"name": "variable.other.property.terraform"
				},
				"3": {
					"name": "punctuation.section.parens.end.terraform meta.template.expression.terraform"
				},
				"4": {
					"name": "keyword.operator.assignment.terraform"
				}
			}
		},
		"block": {
			"name": "meta.block.terraform",
			"begin": "(\\w+)(?:([\\s\\\"\\-[:word:]]*)(\\{))",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"match": "\\b(?:resource|provider|variable|output|locals|module|data|terraform)\\b",
							"name": "entity.name.type.terraform"
						},
						{
							"match": "\\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\\b",
							"comment": "Identifer label",
							"name": "entity.name.type.terraform"
						}
					]
				},
				"2": {
					"patterns": [
						{
							"include": "#string_literals"
						}
					]
				},
				"3": {
					"name": "punctuation.section.block.begin.terraform"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.block.end.terraform"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#attribute_definition"
				},
				{
					"include": "#block"
				},
				{
					"include": "#expressions"
				},
				{
					"include": "#local_identifiers"
				}
			]
		},
		"expressions": {
			"patterns": [
				{
					"include": "#literal_values"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#brackets"
				},
				{
					"include": "#objects"
				},
				{
					"include": "#attribute_access"
				},
				{
					"include": "#structural_types"
				},
				{
					"include": "#functions"
				},
				{
					"include": "#parens"
				}
			]
		},
		"literal_values": {
			"patterns": [
				{
					"include": "#numeric_literals"
				},
				{
					"include": "#language_constants"
				},
				{
					"include": "#string_literals"
				},
				{
					"include": "#heredoc"
				},
				{
					"include": "#terraform_type_keywords"
				},
				{
					"include": "#named_value_references"
				}
			]
		},
		"numeric_literals": {
			"patterns": [
				{
					"match": "\\b\\d+([Ee][+-]?)\\d+\\b",
					"comment": "Integer, no fraction, optional exponent",
					"name": "constant.numeric.float.terraform",
					"captures": {
						"1": {
							"name": "punctuation.separator.exponent.terraform"
						}
					}
				},
				{
					"match": "\\b\\d+(\\.)\\d+(?:([Ee][+-]?)\\d+)?\\b",
					"comment": "Integer, fraction, optional exponent",
					"name": "constant.numeric.float.terraform",
					"captures": {
						"1": {
							"name": "punctuation.separator.decimal.terraform"
						},
						"2": {
							"name": "punctuation.separator.exponent.terraform"
						}
					}
				},
				{
					"match": "\\b\\d+\\b",
					"comment": "Integers",
					"name": "constant.numeric.integer.terraform"
				}
			]
		},
		"string_literals": {
			"begin": "\"",
			"comment": "Strings",
			"name": "string.quoted.double.terraform",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.terraform"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.terraform"
				}
			},
			"patterns": [
				{
					"include": "#string_interpolation"
				},
				{
					"include": "#char_escapes"
				}
			]
		},
		"string_interpolation": {
			"begin": "[%$]{",
			"comment": "String interpolation",
			"name": "meta.interpolation.terraform",
			"beginCaptures": {
				"0": {
					"name": "keyword.other.interpolation.begin.terraform constant.language.terraform"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "keyword.other.interpolation.end.terraform constant.language.terraform"
				}
			},
			"patterns": [
				{
					"match": "\\~\\s",
					"comment": "Trim left whitespace",
					"name": "keyword.operator.template.left.trim.terraform"
				},
				{
					"match": "\\s\\~",
					"comment": "Trim right whitespace",
					"name": "keyword.operator.template.right.trim.terraform"
				},
				{
					"match": "\\b(if|else|endif|for|in|endfor)\\b",
					"comment": "if/else/endif and for/in/endfor directives",
					"name": "keyword.control.terraform"
				},
				{
					"include": "#expressions"
				},
				{
					"include": "#local_identifiers"
				}
			]
		},
		"heredoc": {
			"begin": "(\\<\\<\\-?)\\s*(\\w+)\\s*$",
			"comment": "String Heredoc",
			"name": "string.unquoted.heredoc.terraform",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.heredoc.terraform"
				},
				"2": {
					"name": "keyword.control.heredoc.terraform"
				}
			},
			"end": "^\\s*\\2\\s*$",
			"endCaptures": {
				"0": {
					"comment": "The heredoc token identifier (second capture above).",
					"name": "keyword.control.heredoc.terraform"
				}
			},
			"patterns": [
				{
					"include": "#string_interpolation"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"match": "\\>\\=",
					"name": "keyword.control.terraform"
				},
				{
					"match": "\\<\\=",
					"name": "keyword.control.terraform"
				},
				{
					"match": "\\=\\>",
					"name": "storage.type.function.terraform"
				},
				{
					"match": "\\=\\=",
					"name": "keyword.control.terraform"
				},
				{
					"match": "\\!\\=",
					"name": "keyword.control.terraform"
				},
				{
					"match": "\\+",
					"name": "keyword.control.arithmetic.terraform"
				},
				{
					"comment": "minus sign, only matched if there is whitespace before and after the dash",
					"match": "\\s\\-\\s",
					"name": "keyword.control.arithmetic.terraform"
				},
				{
					"comment": "negative integer",
					"match": "\\-\\d",
					"name": "constant.numeric.integer.terraform"
				},
				{
					"match": "\\*",
					"name": "keyword.control.arithmetic.terraform"
				},
				{
					"match": "\\/",
					"name": "keyword.control.arithmetic.terraform"
				},
				{
					"match": "\\%",
					"name": "keyword.control.arithmetic.terraform"
				},
				{
					"match": "\\&\\&",
					"name": "keyword.control.logical.terraform"
				},
				{
					"match": "\\|\\|",
					"name": "keyword.control.logical.terraform"
				},
				{
					"match": "\\!",
					"name": "keyword.control.logical.terraform"
				},
				{
					"match": "\\>",
					"name": "keyword.control.terraform"
				},
				{
					"match": "\\<",
					"name": "keyword.control.terraform"
				},
				{
					"match": "\\?",
					"name": "keyword.control.terraform"
				},
				{
					"match": "\\.\\.\\.",
					"name": "keyword.control.terraform"
				},
				{
					"match": "\\:",
					"name": "keyword.control.terraform"
				}
			]
		},
		"brackets": {
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.brackets.begin.terraform meta.template.expression.terraform"
				}
			},
			"end": "(\\*?)\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.brackets.end.terraform meta.template.expression.terraform"
				},
				"1": {
					"name": "keyword.operator.splat.terraform constant.terraform"
				}
			},
			"patterns": [
				{
					"include": "#comma"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#for_expressions"
				},
				{
					"include": "#expressions"
				},
				{
					"include": "#local_identifiers"
				}
			]
		},
		"objects": {
			"name": "meta.braces.terraform",
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.braces.begin.terraform"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.braces.end.terraform"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"match": "\\b((?!null|false|true)[[:alpha:]][[:alnum:]_-]*)\\s*(\\s\\=\\s)\\s*",
					"comment": "Literal, named object key",
					"captures": {
						"1": {
							"name": "variable.other.property.terraform"
						},
						"2": {
							"name": "variable"
						}
					}
				},
				{
					"match": "\\b((\").*(\"))\\s*(\\=)\\s*",
					"comment": "String object key",
					"captures": {
						"0": {
							"patterns": [
								{
									"include": "#named_value_references"
								}
							]
						},
						"1": {
							"name": "meta.mapping.key.terraform string.quoted.double.terraform"
						},
						"2": {
							"name": "punctuation.definition.string.begin.terraform"
						},
						"3": {
							"name": "punctuation.definition.string.end.terraform"
						},
						"4": {
							"name": "keyword.operator.terraform"
						}
					}
				},
				{
					"begin": "^\\s*\\(",
					"comment": "Computed object key (any expression between parens)",
					"name": "meta.mapping.key.terraform",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.parens.begin.terraform meta.template.expression.terraform"
						}
					},
					"end": "(\\))\\s*(\\=)\\s*",
					"endCaptures": {
						"1": {
							"name": "punctuation.section.parens.end.terraform meta.template.expression.terraform"
						},
						"2": {
							"name": "keyword.operator.terraform"
						}
					},
					"patterns": [
						{
							"include": "#named_value_references"
						},
						{
							"include": "#attribute_access"
						}
					]
				},
				{
					"include": "#object_key_values"
				},
				{
					"include": "#for_expressions"
				}
			]
		},
		"object_key_values": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#literal_values"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#heredoc"
				},
				{
					"include": "#functions"
				},
				{
					"include": "#local_identifiers"
				},
				{
					"include": "#attribute_access"
				}
			]
		},
		"for_expressions": {
			"patterns": [
				{
					"match": "for",
					"comment": "for keyword",
					"name": "keyword.operator.word.terraform keyword.control.terraform"
				},
				{
					"match": "\\bin\\b",
					"comment": "in keyword",
					"name": "keyword.operator.word.terraform keyword.control.terraform"
				},
				{
					"match": "\\bif\\b",
					"comment": "if keyword",
					"name": "keyword.control.conditional.terraform"
				},
				{
					"include": "#expressions"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#comma"
				},
				{
					"include": "#local_identifiers"
				}
			]
		},
		"attribute_access": {
			"begin": "\\.",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.accessor.terraform"
				}
			},
			"end": "[\\w_-]+",
			"endCaptures": {
				"0": {
					"patterns": [
						{
							"match": "\\b(?!null|false|true)[\\w_-]*\\b",
							"comment": "Attribute access",
							"name": "variable.other.member.terraform"
						}
					]
				},
				"1": {
					"patterns": [
						{
							"match": "\\d+",
							"comment": "Subscript",
							"name": "constant.numeric.integer.terraform"
						},
						{
							"match": "\\*",
							"comment": "Attribute-only splat",
							"name": "keyword.operator.splat.terraform"
						}
					]
				}
			}
		},
		"structural_types": {
			"patterns": [
				{
					"begin": "(object)(\\()(\\{)\\s*",
					"comment": "Object structural type",
					"beginCaptures": {
						"1": {
							"name": "support.function.builtin.terraform"
						},
						"2": {
							"name": "punctuation.section.parens.begin.terraform"
						},
						"3": {
							"name": "punctuation.section.braces.begin.terraform"
						}
					},
					"end": "(\\})(\\))",
					"endCaptures": {
						"1": {
							"name": "punctuation.section.braces.end.terraform"
						},
						"2": {
							"name": "punctuation.section.parens.end.terraform"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#functions"
						},
						{
							"include": "#comma"
						},
						{
							"match": "((?!null|false|true)[[:alpha:]][[:alnum:]_-]*)\\s*(\\=(?!\\=|\\>))\\s*",
							"comment": "Identifier \"=\"",
							"name": "variable.declaration.terraform",
							"captures": {
								"1": {
									"name": "variable.other.property.terraform"
								},
								"2": {
									"name": "keyword.operator.assignment.terraform"
								}
							}
						},
						{
							"include": "#terraform_type_keywords"
						}
					]
				},
				{
					"begin": "(tuple)(\\()(\\[)\\s*",
					"name": "meta.function-call.terraform",
					"comment": "Tuple structural type",
					"beginCaptures": {
						"1": {
							"name": "support.function.builtin.terraform"
						},
						"2": {
							"name": "punctuation.section.parens.begin.terraform"
						},
						"3": {
							"name": "punctuation.section.brackets.begin.terraform"
						}
					},
					"end": "(\\])(\\))",
					"endCaptures": {
						"1": {
							"name": "punctuation.section.brackets.end.terraform"
						},
						"2": {
							"name": "punctuation.section.parens.end.terraform"
						}
					},
					"patterns": [
						{
							"include": "#comma"
						},
						{
							"include": "#terraform_type_keywords"
						}
					]
				}
			]
		},
		"functions": {
			"begin": "(\\w+)(\\()",
			"name": "meta.function-call.terraform",
			"comment": "Built-in function calls",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"match": "abs|ceil|floor|log|max|min|pow|signum|chomp|format|formatlist|indent|join|lower|regex|regexall|replace|split|strrev|substr|title|trimspace|upper|chunklist|coalesce|coalescelist|compact|concat|contains|distinct|element|flatten|index|keys|length|list|lookup|map|matchkeys|merge|range|reverse|set|setintersection|setproduct|setunion|slice|sort|transpose|values|zipmap|base64decode|base64encode|base64gzip|csvdecode|jsondecode|jsonencode|urlencode|yamldecode|yamlencode|abspath|dirname|pathexpand|basename|file|fileexists|fileset|filebase64|templatefile|formatdate|timeadd|timestamp|base64sha256|base64sha512|bcrypt|filebase64sha256|filebase64sha512|filemd5|filemd1|filesha256|filesha512|md5|rsadecrypt|sha1|sha256|sha512|uuid|uuidv5|cidrhost|cidrnetmask|cidrsubnet|tobool|tolist|tomap|tonumber|toset|tostring",
							"name": "support.function.builtin.terraform entity.name.function"
						},
						{
							"match": "\\b(?!null|false|true)[[:alpha:]][[:alnum:]_-]*\\b",
							"name": "variable.function.terraform"
						}
					]
				},
				"2": {
					"name": "punctuation.section.parens.begin.terraform meta.template.expression.terraform"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parens.end.terraform meta.template.expression.terraform"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#expressions"
				},
				{
					"include": "#comma"
				},
				{
					"include": "#local_identifiers"
				}
			]
		},
		"parens": {
			"begin": "\\(",
			"comment": "Parens - matched *after* function syntax",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.parens.begin.terraform meta.template.expression.terraform"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.parens.end.terraform meta.template.expression.terraform"
				}
			},
			"patterns": [
				{
					"include": "#expressions"
				},
				{
					"include": "#local_identifiers"
				}
			]
		}
	}
}